function transform(input) {
  D = input
  const daysOfWeek = ["Sun","Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  newD = {
      'Mon': 0,
      'Tue': 0,
      'Wed': 0,
      'Thu': 0,
      'Fri': 0,
      'Sat': 0,
      'Sun': 0
      }
  var key = null;
  for(key in D){
      d = new Date(key);
      day=d.getDay();
      if(day==1){
          newD[daysOfWeek[1]] += D[key]
      } else if(day==2){
          newD[daysOfWeek[2]] += D[key]
      } else if(day==3){
          newD[daysOfWeek[3]] += D[key]
      } else if(day==4){
          newD[daysOfWeek[4]] += D[key]
      } else if(day==5){
          newD[daysOfWeek[5]] += D[key]
      } else if(day==6){
          newD[daysOfWeek[6]] += D[key]
       } else {
          newD[daysOfWeek[0]] += D[key]
      }
  }

  var countZero=0;
  var amount = 0;
  let i = 1;
  while (i < daysOfWeek.length-1) {
      if(newD[daysOfWeek[i]]==0){
          if(newD[daysOfWeek[i+1]]!=0 && (i+1<daysOfWeek.length-1)){
              newD[daysOfWeek[i]]=((newD[daysOfWeek[i-1]])+(newD[daysOfWeek[i+1]]-newD[daysOfWeek[i-1]])/2);
              // console.log(newD[daysOfWeek[i-1]]);
              // console.log(newD[daysOfWeek[i+1]]);
              // console.log("Effect");
          } else{
              // If there are more than 2 zeroes so this will find no of zeroes
              countZero=1;
              for (let j=i+1;j<daysOfWeek.length-1;j++){
                  if(newD[daysOfWeek[j]]==0 ){
                      countZero += 1;
                  }
              }
              // This j is telling were to stop
              var j= i+countZero;
              // console.log(j,i-1);
              amount = (((newD[daysOfWeek[j]])-(newD[daysOfWeek[i-1]]))/(countZero+1));
              // console.log(amount);
              // console.log(newD[daysOfWeek[j]]);
              // console.log(newD[daysOfWeek[i-1]]);
               // console.log((14-10)/(countZero+1));
              for(let z=i;z<j;z++){
                  newD[daysOfWeek[z]]=newD[daysOfWeek[z-1]]+amount;
              }
              i=j;
          }
      }
      i++;
  }
  return newD
}
